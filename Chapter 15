EXERCISE 1

class Point:
    """ Create a new Point, at coordinates x, y """

    def __init__(self, x=0, y=0):
        """ Create a new point at x, y """
        self.x1 = x
        self.y1 = y
        
p = Point()
q = Point()
p.x1 = 4
p.y1 = 3
distance = ((p.y1-q.y1)**2 + (p.x1-q.x1)**2)**0.5
print(distance)

EXERCISE 2 

class Point:
    """ Create a new Point, at coordinates x, y """

    def __init__(self, x=0, y=0):
        """ Create a new point at x, y """
        self.x1 = x
        self.y1 = y

    def reflect(self):
        a = -1 * self.x1
        b = self.y1
        return Point(a, b)

number = Point()
number.x1 = 4
number.y1 = 3
print(number.reflect())


EXERCISE 3

class Point:
    """ Create a new Point, at coordinates x, y """

    def __init__(self, x=0, y=0):
        """ Create a new point at x, y """
        self.x1 = x
        self.y1 = y

    def riserun(self):
        return self.y1 // self.x1

number = Point()
number.x1 = 4
number.y1 = 3
print(number.riserun())
    
    will fail if self.x1 = 0 because cant divide by 0
    
EXERCISE 4 
  
class Point:
    """ Create a new Point, at coordinates x, y """

    def __init__(self, x=0, y=0):
        """ Create a new point at x, y """
        self.x1 = x
        self.y1 = y

    def getab(self, a):
        gradient = (a.y1 - self.y1)/(a.x1-self.x1)
        c = a.y1 - (gradient * a.x1)
        return (gradient,c)

print(Point(4,10).getab(Point(6,15)))

    will fail if the lines are parallel


EXERCISE 6
  
class SMS:

    def __init__(my_inbox):
        my_inbox.hasbeenviewed = []
        my_inbox.from_number = []
        my_inbox.time_arrived = []
        my_inbox.text_of_sms = []


    def add_new_arrival(my_inbox, from_number, time_arrived, text_of_SMS):
        my_inbox.from_number.append(from_number)
        my_inbox.hasbeenviewed.append(False)
        my_inbox.time_arrived.append(time_arrived)
        my_inbox.text_of_sms.append(text_of_SMS)


    def message_count(my_inbox):
        return len(my_inbox.hasbeenviewed)


    def get_unread_indexes(my_inbox):
        newList = []
        for i in range (len(my_inbox.hasbeenviewed)):
            w = my_inbox.hasbeenviewed[i]
            if w == False:
                newList.append(i)
        return newList


    def get_message(my_inbox,i):
        try:
            w = my_inbox.from_number[i]
            x = my_inbox.time_arrived[i]
            y = my_inbox.text_of_sms[i]
            del my_inbox.hasbeenviewed[i]
            my_inbox.hasbeenviewed.insert(i,True)
            tuple = (w,x,y)
            return tuple
        except:
            return None

