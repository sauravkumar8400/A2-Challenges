import turtle

EXERCISE 1
def koch(t, order, size):
    if order == 0:
        t.forward(size)
    else:
        for angle in [60, -120, 60, 0]:
            koch(t, order-1, size/3)
            t.left(angle)
            print("hi")

def kochsnowflake(t, order, size):
    for i in range(0,3):
        koch(t,order,size)
        t.right(120)

# t = turtle.Turtle()
# window = turtle.Screen()
# kochsnowflake(t,2,300)
# window.mainloop()

EXERCISE 2A 

def cesaro(t, order, size):
    if order == 0:
        t.forward(size)
    else:
        for angle in [85,-170,85,0]:
            cesaro(t, order-1, size/3)
            t.right(angle)

# t = turtle.Turtle()
# window = turtle.Screen()
# t.goto(0,0)
# cesaro(t, 3, 300)
# window.mainloop()

EXERCISE 2B

def cesarosquare(t, order, size):
    for i in range(0,4):
        cesaro(t, order, size)
        t.right(90)

# t = turtle.Turtle()
# window = turtle.Screen()
# t.goto(0,0)
# cesarosquare(t, 3, 300)
# window.mainloop()

EXERCISE 3

def sierpinski(t, order, size):
    if order == 0:
        for i in range(0,4):
            t.left(120)
            t.forward(size)
    else:
        for angle in range(0,4):
            sierpinski(t, order-1, size/2)
            t.forward(size/2)

# t = turtle.Turtle()
# window = turtle.Screen()
# sierpinski(t, 3, 200)
# window.mainloop()

EXERCISE 4

def sierpinskiColour(t, order, size, depth=-1):
    if depth == 0:
        colours = ["red","green","blue", "red"]
        t.color(colours[colours.index(t.color()[0])+1])

    if order == 0:
        for i in range(0,4):
            t.left(120)
            t.forward(size)
    else:
        for angle in range(0,4):
            sierpinskiColour(t, order-1, size/2, depth-1)
            t.forward(size/2)


# t = turtle.Turtle()
# t.speed(0)
# t.color("red")
# window = turtle.Screen()
# sierpinskiColour(t, 4, 200, 3)
# window.mainloop()

EXERCISE 5

import sys

def test(did_pass):
    """  Print the result of a test.  """
    linenum = sys._getframe(1).f_lineno   # Get the caller's line number.
    if did_pass:
        msg = "Test at line {0} ok.".format(linenum)
    else:
        msg = ("Test at line {0} FAILED.".format(linenum))
    print(msg)

def recursive_min(array, min=9999):
    for i in array:
        if type(i) != type([]):
            if i < min:
                min = i
        else:
            min = recursive_min(i, min)

    return min


def test_suite_recursive_min():
    """ Run the suite of tests for code in this module (this file).
    """
    test(recursive_min([2, 9, [1, 13], 8, 6]) == 1)
    test(recursive_min([2, [[100, 1], 90], [10, 13], 8, 6]) == 1)
    test(recursive_min([2, [[13, -7], 90], [1, 100], 8, 6]) == -7)
    test(recursive_min([[[-13, 7], 90], 2, [1, 100], 8, 6]) == -13)

test_suite_recursive_min()        # Here is the call to run the tests

EXERCISE 6

def count(target, array, num=0):
    for i in array:
        if type(i) == type([]):
            num = count(target, i, num)
        else:
            if i == target:
                num += 1
    return num

def test_suite_count():
    test(count(2, []) == 0)
    test(count(2, [2, 9, [2, 1, 13, 2], 8, [2, 6]]) == 4)
    test(count(7, [[9, [7, 1, 13, 2], 8], [7, 6]]) == 2)
    test(count(15, [[9, [7, 1, 13, 2], 8], [2, 6]]) == 0)
    test(count(5, [[5, [5, [1, 5], 5], 5], [5, 6]]) == 6)
    test(count("a",
         [["this",["a",["thing","a"],"a"],"is"], ["a","easy"]]) == 4)

test_suite_count()        # Here is the call to run the tests

# 7. Write a function flatten that returns a simple list containing all the values in a nested list:

def flatten(array, output = []):
    for i in array:
        if type(i) == type([]):
            output = flatten(i, output)
        else:
            output.append(i)
    return output

print(flatten([["this",["a",["thing"],"a"],"is"],["a","easy"]]))

def test_suite_flatten():
    test(flatten([2,9,[2,1,13,2],8,[2,6]]) == [2,9,2,1,13,2,8,2,6])
    test(flatten([[9,[7,1,13,2],8],[7,6]]) == [9,7,1,13,2,8,7,6])
    test(flatten([[9,[7,1,13,2],8],[2,6]]) == [9,7,1,13,2,8,2,6])
    test(flatten([["this",["a",["thing"],"a"],"is"],["a","easy"]]) ==
                  ["this","a","thing","a","is","a","easy"])
    test(flatten([]) == [])
